
SET SERVEROUTPUT ON
SET AUTOPRINT ON
SET VERIFY OFF 

CREATE OR REPLACE PACKAGE MY_PACK AS 

  PROCEDURE MODIFY_SAL(P_DEPT_ID IN DEPARTMENTS.DEPARTMENT_ID%TYPE);
  FUNCTION TOTAL_COST( F_ID IN NUMBER) RETURN NUMBER;
  
  FUNCTION TOTAL_COST( P_FIRST_NAME VARCHAR2, P_LAST_NAME VARCHAR2) RETURN NUMBER;
  FUNCTION TOTAL_COST( P_ZIP VARCHAR2) RETURN NUMBER;


END MY_PACK;
/
CREATE OR REPLACE PACKAGE BODY MY_PACK AS
PROCEDURE MODIFY_SAL(P_DEPT_ID IN DEPARTMENTS.DEPARTMENT_ID%TYPE) IS
V_SAL EMPLOYEES.SALARY%TYPE;
        V_EMP_ID NUMBER(10);
        V_DIFF NUMBER(10);
        V_CNT_INCREASE NUMBER := 0;
        V_AVG_SAL EMPLOYEES.SALARY%TYPE;
        V_FLAG NUMBER;
        V_DEPT NUMBER(10);
        E_EMPTY EXCEPTION;
        CURSOR C_DEPT IS
            SELECT * 
            FROM EMPLOYEES
            WHERE DEPARTMENT_ID = P_DEPT_ID 
            FOR UPDATE NOWAIT;

    BEGIN
            SELECT DEPARTMENT_ID INTO V_DEPT FROM DEPARTMENTS WHERE DEPARTMENT_ID = P_DEPT_ID;

            SELECT COUNT(EMPLOYEE_ID) INTO V_FLAG FROM EMPLOYEES WHERE DEPARTMENT_ID = P_DEPT_ID;

            IF V_FLAG = 0 THEN
                RAISE E_EMPTY;
            END IF;

            SELECT AVG(SALARY) INTO V_AVG_SAL 
            FROM EMPLOYEES 
            WHERE DEPARTMENT_ID = P_DEPT_ID;


        FOR C IN C_DEPT LOOP
        IF (C.SALARY < V_AVG_SAL) THEN
            V_EMP_ID := C.EMPLOYEE_ID;
            V_SAL := C.SALARY;

            UPDATE EMPLOYEES
            SET SALARY = V_AVG_SAL
            WHERE EMPLOYEE_ID = V_EMP_ID;

            V_CNT_INCREASE := V_CNT_INCREASE + 1;
            V_DIFF := V_AVG_SAL - V_SAL;

             DBMS_OUTPUT.PUT_LINE('Employee ' || C.FIRST_NAME || ' ' || C.LAST_NAME || ' just got an increase of $' || V_DIFF);
        END IF;

        END LOOP;

            IF V_CNT_INCREASE > 0 THEN
                DBMS_OUTPUT.PUT_LINE('Total # of employees who received salary increase is: ' || V_CNT_INCREASE);
            ELSE
                DBMS_OUTPUT.PUT_LINE('No salary was modified in Department: ' || P_DEPT_ID);
            END IF;

            COMMIT;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('This Department ID is invalid: ' || P_DEPT_ID);
            WHEN E_EMPTY THEN
                DBMS_OUTPUT.PUT_LINE('This Department is EMPTY: ' || P_DEPT_ID);

        END MODIFY_SAL;
FUNCTION TOTAL_COST( F_ID IN NUMBER) RETURN NUMBER IS
        TOTAL NUMBER := 0;
        CHECKID NUMBER;
        CURSOR COUNT_COST IS
            SELECT COURSE.COST AS COST, SECTION.COURSE_NO, ENROLLMENT.STUDENT_ID
            FROM ENROLLMENT
            FULL JOIN SECTION
            ON ENROLLMENT.SECTION_ID = SECTION.SECTION_ID
            FULL JOIN COURSE
            ON SECTION.COURSE_NO = COURSE.COURSE_NO
            WHERE ENROLLMENT.STUDENT_ID = F_ID;
   BEGIN
        SELECT COUNT(*) INTO CHECKID
        FROM STUDENT
        WHERE STUDENT_ID = F_ID;
        
        IF CHECKID = 0 THEN
            TOTAL := -1;
        ELSE
            FOR I IN COUNT_COST LOOP
            TOTAL := TOTAL + I.COST;
            END LOOP;
        END IF;
          RETURN TOTAL;
    END TOTAL_COST;


FUNCTION TOTAL_COST( P_FIRST_NAME VARCHAR2, P_LAST_NAME VARCHAR2) RETURN NUMBER IS
      
          
        V_VALID NUMBER;
        V_ID NUMBER;    
        V_TOTAL_COST NUMBER;


    BEGIN
        SELECT COUNT(*) INTO V_VALID 
        FROM STUDENT 
        WHERE UPPER(FIRST_NAME) = P_FIRST_NAME AND UPPER(LAST_NAME) = P_LAST_NAME;
        
        
        IF V_VALID = 0 THEN
            RETURN -1;
        ELSE
            
            SELECT STUDENT_ID INTO V_ID 
            FROM STUDENT
            WHERE UPPER(FIRST_NAME) = P_FIRST_NAME AND UPPER(LAST_NAME) = P_LAST_NAME;
            
            V_TOTAL_COST := MY_PACK.TOTAL_COST(V_ID);
            
            RETURN V_TOTAL_COST;
          
        END IF;
    END TOTAL_COST;




FUNCTION TOTAL_COST( P_ZIP VARCHAR2) RETURN NUMBER IS
    
    V_VALID NUMBER;
    V_TOTAL NUMBER := 0;
    V_TEMP NUMBER := 0;
    
    CURSOR C_FINDZIPS IS SELECT * FROM STUDENT 
    WHERE UPPER(ZIP)= UPPER(P_ZIP);
    
    
    BEGIN
    SELECT COUNT(*) INTO V_VALID 
    FROM ZIPCODE
    WHERE UPPER(P_ZIP)= UPPER(ZIP);
    
    IF V_VALID = 0 THEN
      RETURN -1;
    ELSE
      FOR I IN C_FINDZIPS LOOP
        V_TEMP := TOTAL_COST(I.STUDENT_ID); 
        V_TOTAL := V_TOTAL + V_TEMP;
      END LOOP;
    END IF;
    
    RETURN V_TOTAL;

    END TOTAL_COST;

END MY_PACK;


